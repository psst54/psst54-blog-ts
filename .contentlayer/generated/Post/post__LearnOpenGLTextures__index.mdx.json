{
  "title": "[번역] Learn OpenGL : Textures",
  "published_at": "2022-11-07T09:00:00.000Z",
  "category": [
    "study",
    "LearnOpenGL"
  ],
  "tag": [
    "OpenGL"
  ],
  "summary": "Learn OpenGL : Textures를 읽어보자",
  "body": {
    "raw": "\r\n# **Textures**\r\n\r\nWe learned that to add more detail to our objects we can use colors for each vertex to create some interesting images. However, to get a fair bit of realism we'd have to have many vertices so we could specify a lot of colors. This takes up a considerable amount of extra overhead, since each model needs a lot more vertices and for each vertex a color attribute as well.\r\n\r\n우리는 물체에 세부 사항을 더하기 위해 각 vertex에 색상을 사용하여 흥미로운 이미지를 생성할 수 있음을 배웠다. 하지만, 사실성을 얻기 위해서는 많은 색상을 지정할 수 있도록 많은 vertex를 써야 한다. 각 모델이 더 많은 vertex를 필요로 하고 각 vertex에 대한 색상도 필요하기 때문에 이것은 많은 양의 추가적인 오버헤드를 불러온다.\r\n\r\nWhat artists and programmers generally prefer is to use a texture. A texture is a 2D image (even 1D and 3D textures exist) used to add detail to an object; think of a texture as a piece of paper with a nice brick image (for example) on it neatly folded over your 3D house so it looks like your house has a stone exterior. Because we can insert a lot of detail in a single image, we can give the illusion the object is extremely detailed without having to specify extra vertices.\r\n\r\n예술가들과 프로그래머들이 일반적으로 선호하는 것은 텍스처를 사용하는 것이다. 텍스처는 물체에 세부사항을 더해주기 위해서 사용되는 2D 이미지(심지어는 1D와 3D 텍스처도 존재한다.)이다. 텍스처를 (예를 들어) 당신의 집이 벽돌 외관을 가진 것처럼 보이게 만들기 위해서 당신의 3D 집 위에 깔끔하게 접어 놓은 멋진 벽돌 이미지가 그려진 종이 조각으로 생각하라. 우리는 이미지 하나에 많은 세부 사항을 넣을 수 있기 때문에, 우리는 추가적인 vertex 없이 물체가 매우 상세하다는 착시를 줄 수 있다.\r\n\r\n<Aside>\r\nNext to images, textures can also be used to store a large collection of arbitrary data to send to the shaders, but we'll leave that for a different topic.\r\n\r\n이미지 외에도, 텍스처는 shader에 보낼 대량의 임의 데이터 모음을 저장하는 데에 사용할 수도 있지만, 그것은 다른 주제로 남겨둔다.\r\n\r\n</Aside>\r\n\r\nBelow you'll see a texture image of a [brick wall](https://learnopengl.com/img/textures/wall.jpg) mapped to the triangle from the previous chapter.\r\n\r\n아래에서 이전 챕터의 삼각형에 매핑되는 벽돌 벽의 텍스처 이미지를 볼 수 있다.\r\n\r\n![Untitled](/post/LearnOpenGLTextures/Untitled.png)\r\n\r\nIn order to map a texture to the triangle we need to tell each vertex of the triangle which part of the texture it corresponds to. Each vertex should thus have a texture coordinate associated with them that specifies what part of the texture image to sample from. Fragment interpolation then does the rest for the other fragments.\r\n\r\n텍스처를 삼각형에 매핑하기 위해서, 우리는 삼각형의 각 vertex가 텍스처의 어떤 부분에 대응하는지를 말해야 한다. 따라서 각 vertex는 텍스처 이미지의 어떤 부분을 샘플링할 것인지를 지정하는 텍스처 좌표를 가지고 있어야 한다. 그리고 나서 fragment interpolation은 다른 fragment에 대해 나머지 작업을 수행한다.\r\n\r\nTexture coordinates range from `0` to `1` in the `x` and `y` axis (remember that we use 2D texture images). Retrieving the texture color using texture coordinates is called sampling. Texture coordinates start at `(0,0)` for the lower left corner of a texture image to `(1,1)` for the upper right corner of a texture image. The following image shows how we map texture coordinates to the triangle:\r\n\r\n텍스처 좌표의 범위는 x축과 y축의 0에서 1까지이다(우리가 2D 텍스처 이미지를 사용함을 기억하라). 텍스처 좌표를 이용해서 텍스처의 색상을 되살리는 것을 샘플링이라고 부른다. 텍스처 좌표는 텍스처 이미지의 왼쪽 아래 모서리를 가리키는 (0, 0)에서 시작해서 텍스처 이미지의 오른쪽 위 모서리를 가리키는 (1, 1)까지이다. 다음 이미지는 우리가 어떻게 텍스처 좌표를 삼각형에 매핑하는지를 보여준다.\r\n\r\n![Untitled](/post/LearnOpenGLTextures/Untitled1.png)\r\n\r\nWe specify 3 texture coordinate points for the triangle. We want the bottom-left side of the triangle to correspond with the bottom-left side of the texture so we use the `(0,0)` texture coordinate for the triangle's bottom-left vertex. The same applies to the bottom-right side with a `(1,0)` texture coordinate. The top of the triangle should correspond with the top-center of the texture image so we take `(0.5,1.0)` as its texture coordinate. We only have to pass 3 texture coordinates to the vertex shader, which then passes those to the fragment shader that neatly interpolates all the texture coordinates for each fragment.\r\n\r\n삼각형에 대한 텍스처 좌표점 3개를 지정한다. 삼각형의 삼각형의 왼쪽 아래 변이 텍스처의 왼쪽 아래 변과 일치하도록 삼각형의 왼쪽 아래 vertex에 (0, 0) 텍스처 좌표를 사용한다. 오른쪽 아래 변과 (1, 0) 텍스처 좌표에도 동일하게 적용된다. 삼각형의 위쪽 꼭짓점은 텍스처 이미지의 중앙 위와 대응해야 하기 때문에 텍스처 좌표 (0.5, 1.0)을 취한다. vertex shader에는 3개의 텍스처 좌표만 넘기면 되고, 그 다음에는 각 fragment에 대해 텍스처 좌표를 깔끔하게 보간하는 fragment shader에 전달된다.\r\n\r\nThe resulting texture coordinates would then look like this:\r\n\r\n결과로 텍스처 좌표는 이렇게 보일 것이다.\r\n\r\n```cpp\r\nfloat texCoords[] = {\r\n    0.0f, 0.0f,  // lower-left corner\r\n    1.0f, 0.0f,  // lower-right corner\r\n    0.5f, 1.0f   // top-center corner\r\n};\r\n```\r\n\r\nTexture sampling has a loose interpretation and can be done in many different ways. It is thus our job to tell OpenGL how it should *sample*\r\n its textures.\r\n\r\n텍스처 샘플링은 느슨하게 보간되며, 다양한 방법으로 수행될 수 있다. 따라서 OpenGL에 어떻게 텍스처를 샘플링할 것인가를 말하는 것은 우리의 일이다.\r\n\r\n## **Texture Wrapping**\r\n\r\nTexture coordinates usually range from `(0,0)` to `(1,1)` but what happens if we specify coordinates outside this range? The default behavior of OpenGL is to repeat the texture images (we basically ignore the integer part of the floating point texture coordinate), but there are more options OpenGL offers:\r\n\r\n텍스처 좌표는 보통 (0, 0)부터 (1, 1)까지이지만, 이 범위를 벗어난 좌표를 지정하면 어떻게 될까? OpenGL의 기본 행동은 텍스처 이미지를 반복하는 것이지만(우리는 부동 소수점 텍스처 좌표의 정수 부분은 무시한다), OpenGL에서 더 다양한 옵션을 제공한다.\r\n\r\n- `GL_REPEAT`: The default behavior for textures. Repeats the texture image.\r\n  텍스처에 적용되는 기본 행동이다. 텍스처 이미지를 반복한다.\r\n- `GL_MIRRORED_REPEAT`: Same as `GL_REPEAT` but mirrors the image with each repeat.\r\n  `GL_REPEAT` 과 같지만 매 반복마다 이미지를 뒤집는다.\r\n- `GL_CLAMP_TO_EDGE`: Clamps the coordinates between `0` and `1`. The result is that higher coordinates become clamped to the edge, resulting in a stretched edge pattern.\r\n  0와 1 사이의 좌표를 고정한다. 그 결과 큰 좌표가 가장자리에 고정되고 가장자리의 패턴이 늘어난다.\r\n- `GL_CLAMP_TO_BORDER`: Coordinates outside the range are now given a user-specified border color.\r\n  범위 밖의 좌표들은 유저가 지정한 테두리 색이 부여된다.\r\n\r\nEach of the options have a different visual output when using texture coordinates outside the default range. Let's see what these look like on a sample texture image (original image by Hólger Rezende):\r\n\r\n각 옵션들은 기본 범위 바깥의 텍스처 좌표들을 사용할 때 다른 시각적 결과를 가진다. 샘플 텍스처 이미지에서 이들이 어떻게 보이는지 알아보자(원본 이미지 Hólger Rezende).\r\n\r\n![Untitled](/post/LearnOpenGLTextures/Untitled2.png)\r\n\r\nEach of the aforementioned options can be set per coordinate axis (`s`, `t`  (and `r` if you're using 3D textures) equivalent to x, y, z) with the `glTexParameter*` function:\r\n\r\n각각 앞서 언급한 옵션들은 `glTexParameter*` 함수를 이용해서 좌표축 (s, t (그리고 3D 텍스처를 사용한다면 r)) 별로 설정될 수 있다.\r\n\r\n```cpp\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);\r\n```\r\n\r\nThe first argument specifies the texture target; we're working with 2D textures so the texture target is `GL_TEXTURE_2D`. The second argument requires us to tell what option we want to set and for which texture axis; we want to configure it for both the `S` and `T` axis. The last argument requires us to pass in the texture wrapping mode we'd like and in this case OpenGL will set its texture wrapping option on the currently active texture with GL_MIRRORED_REPEAT.\r\n\r\n첫 번째 인자는 목표 텍스처를 지정한다. 우리는 2D 텍스처를 이용하고 있개 때문에 텍스처 목표는 `GL_TEXTURE_2D`이다. 두 번째 인자는 어떤 텍스처 축에 대해서 옵션을 적용시킬지를 필요로 한다. 우리는 `S`와 `T`축 모두에 적용시키기를 원한다. 마지막 인자는 원하는 텍스처 wrapping 모드를 전달하며 이 경우에는 OpenGL이 texture wrapping 옵션으로 현재 활성화된 텍스처에 `GL_MIRRORED_REPEAT`로 적용할 것이다.\r\n\r\nIf we choose the GL_CLAMP_TO_BORDER option we should also specify a border color. This is done using the `fv` equivalent of the glTexParameter function with GL_TEXTURE_BORDER_COLOR as its option where we pass in a float array of the border's color value:\r\n\r\n만약 우리가 `GL_CLAMP_TO_BORDER` 옵션을 고른다면 테두리 색상도 지정해야 한다. 이는 fv\r\n\r\n```cpp\r\nfloat borderColor[] = { 1.0f, 1.0f, 0.0f, 1.0f };\r\nglTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);\r\n```\r\n\r\n## **Texture Filtering**\r\n\r\nTexture coordinates do not depend on resolution but can be any floating point value, thus OpenGL has to figure out which texture pixel (also known as a texel ) to map the texture coordinate to. This becomes especially important if you have a very large object and a low resolution texture. You probably guessed by now that OpenGL has options for this texture filtering as well. There are several options available but for now we'll discuss the most important options: `GL_NEAREST` and `GL_LINEAR`.\r\n\r\n텍스처 좌표는 해상도에 의존하지 않지만 부동소수점 값이 될 수 있으므로 OpenGL은 어떤 텍스처 픽셀(texel이라고도 함)이 텍스처 좌표에 매핑될 지 파악해야 한다. 이것은 매우 큰 물체와 낮은 해상도의 텍스처를 가진 경우에 매우 중요해진다. 지금쯤 OpenGL이 텍스처 필터링에 대해서 옵션들을 가지고 있다고 짐작했을 것이다. 몇 가지 옵션을 사용할 수 있지만, 현재로서는 가장 중요한 옵션인 `GL_NEAREST`와 `GL_LINEAR`에 대해 알아보자.\r\n\r\n`GL_NEAREST` (also known as nearest neighbor or point filtering) is the default texture filtering method of OpenGL. When set to `GL_NEAREST`, OpenGL selects the texel that center is closest to the texture coordinate. Below you can see 4 pixels where the cross represents the exact texture coordinate. The upper-left texel has its center closest to the texture coordinate and is therefore chosen as the sampled color:\r\n\r\n`GL_NEAREST`(nearest neighbor 또는 point filtering이라고도 알려짐)는 OpenGL에서 기본적인 텍스쳐 필터링 방법이다. `GL_NEAREST`로 설정되면, OpenGL은 중심이 텍스처 좌표에 가장 가까운 texel을 선택한다. 아래 그림에서 십자가가 정확한 텍스처 좌표를 나타내는 4픽셀을 볼 수 있다. 왼쪽 위 texel의 중심은 텍스처 좌표에 가장 가깝기 때문에 샘플링된 색상으로 선택된다.\r\n\r\n![Untitled](/post/LearnOpenGLTextures/Untitled3.png)\r\n\r\n`GL_LINEAR`\r\n (also known as (bi)linear filtering) takes an interpolated value from the texture coordinate's neighboring texels, approximating a color between the texels. The smaller the distance from the texture coordinate to a texel's center, the more that texel's color contributes to the sampled color. Below we can see that a mixed color of the neighboring pixels is returned:\r\n\r\n`GL_LINEAR`((bi)linear filtering으로도 알려짐)은 텍스처 좌표의 인접 texel로부터 보간된 값을 가져와서 텍스처 사이의 색을 근사한다. 텍스처 좌표에서 texel의 중심까지 거리가 더 가까울수록, 샘플링된 색상에 texel의 색상이 더 많이 기여한다. 아래 그림에서 인접한 픽셀들의 혼합된 색상이 반환되는 것을 볼 수 있다.\r\n\r\n![Untitled](/post/LearnOpenGLTextures/Untitled4.png)\r\n\r\nBut what is the visual effect of such a texture filtering method? Let's see how these methods work when using a texture with a low resolution on a large object (texture is therefore scaled upwards and individual texels are noticeable):\r\n\r\n그러나 그러한 텍스처 필터링 방법의 시각적 효과는 무엇인가? 큰 물체에서 낮은 해상도의 텍스처를 사용할 때 이러한 방법이 어떻게 작동하는지 알아보자 (그러므로 텍스처는 크게 조정되고 각 texel들이 관찰된다).\r\n\r\n![Untitled](/post/LearnOpenGLTextures/Untitled5.png)\r\n\r\n`GL_NEAREST` results in blocked patterns where we can clearly see the pixels that form the texture while `GL_LINEAR` produces a smoother pattern where the individual pixels are less visible. `GL_LINEAR` produces a more realistic output, but some developers prefer a more 8-bit look and as a result pick the `GL_NEAREST` option.\r\n\r\n`GL_NEAREST`는 텍스처를 형성하는 픽셀들을 명확하게 볼 수 있는 덩어리진 패턴을 낳지만 `GL_LINEAR`는 개별적인 픽셀들은 덜 보이는 부드러운 패턴을 만든다. `GL_LINEAR`는 더 사실적인 결과물을 만들지만, 몇몇 개발자들은 8-bit 모양을 선호하기 때문에 `GL_NEAREST` 옵션을 고른다.\r\n\r\nTexture filtering can be set for magnifying and minifying operations (when scaling up or downwards) so you could for example use nearest neighbor filtering when textures are scaled downwards and linear filtering for upscaled textures. We thus have to specify the filtering method for both options via `glTexParameter*`. The code should look similar to setting the wrapping method:\r\n\r\n텍스처 필터링은 확대하고 축소하는 작업(확대 또는 축소 시)으로 설정될 수 있으므로 예를 들어 텍스처가 작게 변환될 때 nearest neighbor filtering을 사용하거나 텍스처가 크게 변환되었을 때 linear filtering을 사용할 수 있다. 따라서 우리는 `glTexParameter*`를 통해 두 옵션에 대한 필터링 방법을 지정해야 한다. 코드는 _wrapping_ 방법 설정과 비슷해야 한다.\r\n\r\n```cpp\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\r\n```\r\n\r\n## Mipmaps\r\n\r\nImagine we had a large room with thousands of objects, each with an attached texture. There will be objects far away that have the same high resolution texture attached as the objects close to the viewer. Since the objects are far away and probably only produce a few fragments, OpenGL has difficulties retrieving the right color value for its fragment from the high resolution texture, since it has to pick a texture color for a fragment that spans a large part of the texture. This will produce visible artifacts on small objects, not to mention the waste of memory bandwidth using high resolution textures on small objects.\r\n\r\n각각 텍스처가 붙어 있는 수천 개의 물체가 있는 커다란 방을 상상해보자. 관찰자에 가까운 고해상도의 텍스처가 붙어 있는 물체들과 동일한 물체들이 멀리에도 있을 것이다. 물체들은 멀리 있고 아마 몇몇 fragment만을 생성할 것이기 때문에, OpenGL은 텍스처의 큰 부분을 확장하는 fragment를 위한 텍스처 색상을 골라야 하기 때문에, 고해상도 텍스처에서 fragment를 위한 맞는 색상을 찾는 데 어려움이 있다. 이것은 작은 물체들에 고해상도의 텍스처를 사용하는 메모리 대역폭의 낭비는 말할 것도 없고 작은 물체에서 눈에 보이는 인공물을 생성할 것이다.\r\n\r\nTo solve this issue OpenGL uses a concept called mipmaps that is basically a collection of texture images where each subsequent texture is twice as small compared to the previous one. The idea behind mipmaps should be easy to understand: after a certain distance threshold from the viewer, OpenGL will use a different mipmap texture that best suits the distance to the object. Because the object is far away, the smaller resolution will not be noticeable to the user. OpenGL is then able to sample the correct texels, and there's less cache memory involved when sampling that part of the mipmaps. Let's take a closer look at what a mipmapped texture looks like:\r\n\r\n이 문제를 해결하기 위해서 OpenGL은 기본적으로 연속하는 텍스처가 이전 텍스처보다 1/2 크기인 텍스처 이미지들의 모음을 이르는 mipmap이라는 개념을 사용한다. mipmap에 들어 있는 아이디어는 이해하기 쉬워야 한다: 관찰자로부터 일정 거리 임계점이 지나면, OpenGL은 물체까지의 거리에 가장 맞는 다른 mipmap 텍스처를 사용할 것이다. 물체가 멀리 있으므로, 더 작은 해상도는 유저에게 보이지 않을 것이다. 그리하여 OpenGL은 맞는 texel을 찾을 수 있고, mipmap의 부분을 샘플링할 때 관여하는 캐시 메모리는 더 적을 것이다. mipmap 텍스처가 어떻게 생겼는지 더 자세히 알아보자.\r\n\r\n![Untitled](/post/LearnOpenGLTextures/Untitled6.png)\r\n\r\nCreating a collection of mipmapped textures for each texture image is cumbersome to do manually, but luckily OpenGL is able to do all the work for us with a single call to `glGenerateMipmap` after we've created a texture.\r\n\r\n각 텍스처 이미지에 대해서 mipmap 텍스처의 모음을 수동으로 생성하는 것은 성가시지만, 운좋게도 우리가 텍스처를 생성하고 나서 `glGenerateMipmap`를 호출하는 것으로 OpenGL이 모든 작업을 할 수 있다.\r\n\r\nWhen switching between mipmaps levels during rendering OpenGL may show some artifacts like sharp edges visible between the two mipmap layers. Just like normal texture filtering, it is also possible to filter between mipmap levels using `NEAREST` and `LINEAR` filtering for switching between mipmap levels. To specify the filtering method between mipmap levels we can replace the original filtering methods with one of the following four options:\r\n\r\n렌더링 중에 mipmap 레벨 사이를 이동할 때 OpenGL은 두 mipmap 레이어 사이에 날카로운 모서리같은 물체를 보여줄 지도 모른다. 일반 텍스처 필터링처럼, mipmap 레벨 사이를 이동하기 위해 그 사이에 NEAREST와 LINEAR 필터링을 사용하는 것도 가능하다. mipmap 레벨 사이에 필터링 방법을 지정하기 위해서 우리는 기본 방법을 다음 4가지 옵션 중 하나로 대체할 수 있다.\r\n\r\n- `GL_NEAREST_MIPMAP_NEAREST`: takes the nearest mipmap to match the pixel size and uses nearest neighbor interpolation for texture sampling.\r\n  `GL_NEAREST_MIPMAP_NEAREST`: 픽셀 사이즈와 일치하도록 가장 가까운 mipmap을 가져와 텍스처 샘플링에 nearest neighbor 보간을 사용한다.\r\n- `GL_LINEAR_MIPMAP_NEAREST`: takes the nearest mipmap level and samples that level using linear interpolation.\r\n  `GL_LINEAR_MIPMAP_NEAREST`: 가장 가까운 mipmap 레벨을 가져와 선형 보간 방법을 사용해 샘플링한다.\r\n- `GL_NEAREST_MIPMAP_LINEAR`: linearly interpolates between the two mipmaps that most closely match the size of a pixel and samples the interpolated level via nearest neighbor interpolation.\r\n  `GL_NEAREST_MIPMAP_LINEAR`: 픽셀 사이즈와 가장 가깝게 맞는 두 mipmap 사이를 선형으로 보간하고 보간된 레벨에서 nearest neighbor 보간법으로 샘플링한다.\r\n- `GL_LINEAR_MIPMAP_LINEAR`: linearly interpolates between the two closest mipmaps and samples the interpolated level via linear interpolation.\r\n  `GL_LINEAR_MIPMAP_LINEAR`: 가장 가까운 mipmap을 선형으로 보간하고 보간된 레벨을 선형 보간법으로 샘플링한다.\r\n\r\nJust like texture filtering we can set the filtering method to one of the 4 aforementioned methods using `glTexParameteri`:\r\n\r\n텍스처 필터링과 마찬가지로 우리는 `glTexParameteri`를 사용해서 필터링 방법을 위에서 언급된 4가지 방법 중 하나로 설정할 수 있다.\r\n\r\n```cpp\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\r\n```\r\n\r\nA common mistake is to set one of the mipmap filtering options as the magnification filter. This doesn't have any effect since mipmaps are primarily used for when textures get downscaled: texture magnification doesn't use mipmaps and giving it a mipmap filtering option will generate an OpenGL `GL_INVALID_ENUM` error code.\r\n\r\n흔한 실수는 mipmap 필터링 옵션 중 하나를 확대 필터로 설정하는 것이다. mipmap은 주로 텍스처가 축소될 때 주로 사용되기 때문에 아무런 효과가 없다. 텍스처 확대는 mipmap을 사용하지 않으며 확대를 위해 mipmap 필터링 옵션을 주는 것은 OpenGL `GL_INVALID_ENUM` 에러 코드를 만들 것이다.\r\n",
    "code": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),x=(r,e)=>{for(var n in e)o(r,n,{get:e[n],enumerable:!0})},l=(r,e,n,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!g.call(r,i)&&i!==n&&o(r,i,{get:()=>e[i],enumerable:!(a=p(e,i))||a.enumerable});return r};var L=(r,e,n)=>(n=r!=null?d(u(r)):{},l(e||!r||!r.__esModule?o(n,\"default\",{value:r,enumerable:!0}):n,r)),w=r=>l(o({},\"__esModule\",{value:!0}),r);var h=f((v,s)=>{s.exports=_jsx_runtime});var G={};x(G,{default:()=>T,frontmatter:()=>E});var t=L(h()),E={title:\"[\\uBC88\\uC5ED] Learn OpenGL : Textures\",category:[\"study\",\"LearnOpenGL\"],tag:[\"OpenGL\"],published_at:new Date(16678116e5),last_modified_at:new Date(16678116e5),summary:\"Learn OpenGL : Textures\\uB97C \\uC77D\\uC5B4\\uBCF4\\uC790\"};function c(r){let e=Object.assign({h1:\"h1\",strong:\"strong\",p:\"p\",a:\"a\",img:\"img\",code:\"code\",pre:\"pre\",em:\"em\",h2:\"h2\",ul:\"ul\",li:\"li\"},r.components),{Aside:n}=e;return n||b(\"Aside\",!0,\"22:1-27:9\"),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{children:(0,t.jsx)(e.strong,{children:\"Textures\"})}),`\n`,(0,t.jsx)(e.p,{children:\"We learned that to add more detail to our objects we can use colors for each vertex to create some interesting images. However, to get a fair bit of realism we'd have to have many vertices so we could specify a lot of colors. This takes up a considerable amount of extra overhead, since each model needs a lot more vertices and for each vertex a color attribute as well.\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\uC6B0\\uB9AC\\uB294 \\uBB3C\\uCCB4\\uC5D0 \\uC138\\uBD80 \\uC0AC\\uD56D\\uC744 \\uB354\\uD558\\uAE30 \\uC704\\uD574 \\uAC01 vertex\\uC5D0 \\uC0C9\\uC0C1\\uC744 \\uC0AC\\uC6A9\\uD558\\uC5EC \\uD765\\uBBF8\\uB85C\\uC6B4 \\uC774\\uBBF8\\uC9C0\\uB97C \\uC0DD\\uC131\\uD560 \\uC218 \\uC788\\uC74C\\uC744 \\uBC30\\uC6E0\\uB2E4. \\uD558\\uC9C0\\uB9CC, \\uC0AC\\uC2E4\\uC131\\uC744 \\uC5BB\\uAE30 \\uC704\\uD574\\uC11C\\uB294 \\uB9CE\\uC740 \\uC0C9\\uC0C1\\uC744 \\uC9C0\\uC815\\uD560 \\uC218 \\uC788\\uB3C4\\uB85D \\uB9CE\\uC740 vertex\\uB97C \\uC368\\uC57C \\uD55C\\uB2E4. \\uAC01 \\uBAA8\\uB378\\uC774 \\uB354 \\uB9CE\\uC740 vertex\\uB97C \\uD544\\uC694\\uB85C \\uD558\\uACE0 \\uAC01 vertex\\uC5D0 \\uB300\\uD55C \\uC0C9\\uC0C1\\uB3C4 \\uD544\\uC694\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC774\\uAC83\\uC740 \\uB9CE\\uC740 \\uC591\\uC758 \\uCD94\\uAC00\\uC801\\uC778 \\uC624\\uBC84\\uD5E4\\uB4DC\\uB97C \\uBD88\\uB7EC\\uC628\\uB2E4.\"}),`\n`,(0,t.jsx)(e.p,{children:\"What artists and programmers generally prefer is to use a\\xA0texture. A texture is a 2D image (even 1D and 3D textures exist) used to add detail to an object; think of a texture as a piece of paper with a nice brick image (for example) on it neatly folded over your 3D house so it looks like your house has a stone exterior. Because we can insert a lot of detail in a single image, we can give the illusion the object is extremely detailed without having to specify extra vertices.\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\uC608\\uC220\\uAC00\\uB4E4\\uACFC \\uD504\\uB85C\\uADF8\\uB798\\uBA38\\uB4E4\\uC774 \\uC77C\\uBC18\\uC801\\uC73C\\uB85C \\uC120\\uD638\\uD558\\uB294 \\uAC83\\uC740 \\uD14D\\uC2A4\\uCC98\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uAC83\\uC774\\uB2E4. \\uD14D\\uC2A4\\uCC98\\uB294 \\uBB3C\\uCCB4\\uC5D0 \\uC138\\uBD80\\uC0AC\\uD56D\\uC744 \\uB354\\uD574\\uC8FC\\uAE30 \\uC704\\uD574\\uC11C \\uC0AC\\uC6A9\\uB418\\uB294 2D \\uC774\\uBBF8\\uC9C0(\\uC2EC\\uC9C0\\uC5B4\\uB294 1D\\uC640 3D \\uD14D\\uC2A4\\uCC98\\uB3C4 \\uC874\\uC7AC\\uD55C\\uB2E4.)\\uC774\\uB2E4. \\uD14D\\uC2A4\\uCC98\\uB97C (\\uC608\\uB97C \\uB4E4\\uC5B4) \\uB2F9\\uC2E0\\uC758 \\uC9D1\\uC774 \\uBCBD\\uB3CC \\uC678\\uAD00\\uC744 \\uAC00\\uC9C4 \\uAC83\\uCC98\\uB7FC \\uBCF4\\uC774\\uAC8C \\uB9CC\\uB4E4\\uAE30 \\uC704\\uD574\\uC11C \\uB2F9\\uC2E0\\uC758 3D \\uC9D1 \\uC704\\uC5D0 \\uAE54\\uB054\\uD558\\uAC8C \\uC811\\uC5B4 \\uB193\\uC740 \\uBA4B\\uC9C4 \\uBCBD\\uB3CC \\uC774\\uBBF8\\uC9C0\\uAC00 \\uADF8\\uB824\\uC9C4 \\uC885\\uC774 \\uC870\\uAC01\\uC73C\\uB85C \\uC0DD\\uAC01\\uD558\\uB77C. \\uC6B0\\uB9AC\\uB294 \\uC774\\uBBF8\\uC9C0 \\uD558\\uB098\\uC5D0 \\uB9CE\\uC740 \\uC138\\uBD80 \\uC0AC\\uD56D\\uC744 \\uB123\\uC744 \\uC218 \\uC788\\uAE30 \\uB54C\\uBB38\\uC5D0, \\uC6B0\\uB9AC\\uB294 \\uCD94\\uAC00\\uC801\\uC778 vertex \\uC5C6\\uC774 \\uBB3C\\uCCB4\\uAC00 \\uB9E4\\uC6B0 \\uC0C1\\uC138\\uD558\\uB2E4\\uB294 \\uCC29\\uC2DC\\uB97C \\uC904 \\uC218 \\uC788\\uB2E4.\"}),`\n`,(0,t.jsxs)(n,{children:[(0,t.jsx)(e.p,{children:\"Next to images, textures can also be used to store a large collection of arbitrary data to send to the shaders, but we'll leave that for a different topic.\"}),(0,t.jsx)(e.p,{children:\"\\uC774\\uBBF8\\uC9C0 \\uC678\\uC5D0\\uB3C4, \\uD14D\\uC2A4\\uCC98\\uB294 shader\\uC5D0 \\uBCF4\\uB0BC \\uB300\\uB7C9\\uC758 \\uC784\\uC758 \\uB370\\uC774\\uD130 \\uBAA8\\uC74C\\uC744 \\uC800\\uC7A5\\uD558\\uB294 \\uB370\\uC5D0 \\uC0AC\\uC6A9\\uD560 \\uC218\\uB3C4 \\uC788\\uC9C0\\uB9CC, \\uADF8\\uAC83\\uC740 \\uB2E4\\uB978 \\uC8FC\\uC81C\\uB85C \\uB0A8\\uACA8\\uB454\\uB2E4.\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Below you'll see a texture image of a\\xA0\",(0,t.jsx)(e.a,{href:\"https://learnopengl.com/img/textures/wall.jpg\",children:\"brick wall\"}),\"\\xA0mapped to the triangle from the previous chapter.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"\\uC544\\uB798\\uC5D0\\uC11C \\uC774\\uC804 \\uCC55\\uD130\\uC758 \\uC0BC\\uAC01\\uD615\\uC5D0 \\uB9E4\\uD551\\uB418\\uB294 \\uBCBD\\uB3CC \\uBCBD\\uC758 \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uB97C \\uBCFC \\uC218 \\uC788\\uB2E4.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/post/LearnOpenGLTextures/Untitled.png\",alt:\"Untitled\"})}),`\n`,(0,t.jsx)(e.p,{children:\"In order to map a texture to the triangle we need to tell each vertex of the triangle which part of the texture it corresponds to. Each vertex should thus have a\\xA0texture coordinate\\xA0associated with them that specifies what part of the texture image to sample from. Fragment interpolation then does the rest for the other fragments.\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\uD14D\\uC2A4\\uCC98\\uB97C \\uC0BC\\uAC01\\uD615\\uC5D0 \\uB9E4\\uD551\\uD558\\uAE30 \\uC704\\uD574\\uC11C, \\uC6B0\\uB9AC\\uB294 \\uC0BC\\uAC01\\uD615\\uC758 \\uAC01 vertex\\uAC00 \\uD14D\\uC2A4\\uCC98\\uC758 \\uC5B4\\uB5A4 \\uBD80\\uBD84\\uC5D0 \\uB300\\uC751\\uD558\\uB294\\uC9C0\\uB97C \\uB9D0\\uD574\\uC57C \\uD55C\\uB2E4. \\uB530\\uB77C\\uC11C \\uAC01 vertex\\uB294 \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uC758 \\uC5B4\\uB5A4 \\uBD80\\uBD84\\uC744 \\uC0D8\\uD50C\\uB9C1\\uD560 \\uAC83\\uC778\\uC9C0\\uB97C \\uC9C0\\uC815\\uD558\\uB294 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB97C \\uAC00\\uC9C0\\uACE0 \\uC788\\uC5B4\\uC57C \\uD55C\\uB2E4. \\uADF8\\uB9AC\\uACE0 \\uB098\\uC11C fragment interpolation\\uC740 \\uB2E4\\uB978 fragment\\uC5D0 \\uB300\\uD574 \\uB098\\uBA38\\uC9C0 \\uC791\\uC5C5\\uC744 \\uC218\\uD589\\uD55C\\uB2E4.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Texture coordinates range from\\xA0\",(0,t.jsx)(e.code,{children:\"0\"}),\"\\xA0to\\xA0\",(0,t.jsx)(e.code,{children:\"1\"}),\"\\xA0in the\\xA0\",(0,t.jsx)(e.code,{children:\"x\"}),\"\\xA0and\\xA0\",(0,t.jsx)(e.code,{children:\"y\"}),\"\\xA0axis (remember that we use 2D texture images). Retrieving the texture color using texture coordinates is called\\xA0sampling. Texture coordinates start at\\xA0\",(0,t.jsx)(e.code,{children:\"(0,0)\"}),\"\\xA0for the lower left corner of a texture image to\\xA0\",(0,t.jsx)(e.code,{children:\"(1,1)\"}),\"\\xA0for the upper right corner of a texture image. The following image shows how we map texture coordinates to the triangle:\"]}),`\n`,(0,t.jsx)(e.p,{children:\"\\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC758 \\uBC94\\uC704\\uB294 x\\uCD95\\uACFC y\\uCD95\\uC758 0\\uC5D0\\uC11C 1\\uAE4C\\uC9C0\\uC774\\uB2E4(\\uC6B0\\uB9AC\\uAC00 2D \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uB97C \\uC0AC\\uC6A9\\uD568\\uC744 \\uAE30\\uC5B5\\uD558\\uB77C). \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB97C \\uC774\\uC6A9\\uD574\\uC11C \\uD14D\\uC2A4\\uCC98\\uC758 \\uC0C9\\uC0C1\\uC744 \\uB418\\uC0B4\\uB9AC\\uB294 \\uAC83\\uC744 \\uC0D8\\uD50C\\uB9C1\\uC774\\uB77C\\uACE0 \\uBD80\\uB978\\uB2E4. \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB294 \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uC758 \\uC67C\\uCABD \\uC544\\uB798 \\uBAA8\\uC11C\\uB9AC\\uB97C \\uAC00\\uB9AC\\uD0A4\\uB294 (0, 0)\\uC5D0\\uC11C \\uC2DC\\uC791\\uD574\\uC11C \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uC758 \\uC624\\uB978\\uCABD \\uC704 \\uBAA8\\uC11C\\uB9AC\\uB97C \\uAC00\\uB9AC\\uD0A4\\uB294 (1, 1)\\uAE4C\\uC9C0\\uC774\\uB2E4. \\uB2E4\\uC74C \\uC774\\uBBF8\\uC9C0\\uB294 \\uC6B0\\uB9AC\\uAC00 \\uC5B4\\uB5BB\\uAC8C \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB97C \\uC0BC\\uAC01\\uD615\\uC5D0 \\uB9E4\\uD551\\uD558\\uB294\\uC9C0\\uB97C \\uBCF4\\uC5EC\\uC900\\uB2E4.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/post/LearnOpenGLTextures/Untitled1.png\",alt:\"Untitled\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"We specify 3 texture coordinate points for the triangle. We want the bottom-left side of the triangle to correspond with the bottom-left side of the texture so we use the\\xA0\",(0,t.jsx)(e.code,{children:\"(0,0)\"}),\"\\xA0texture coordinate for the triangle's bottom-left vertex. The same applies to the bottom-right side with a\\xA0\",(0,t.jsx)(e.code,{children:\"(1,0)\"}),\"\\xA0texture coordinate. The top of the triangle should correspond with the top-center of the texture image so we take\\xA0\",(0,t.jsx)(e.code,{children:\"(0.5,1.0)\"}),\"\\xA0as its texture coordinate. We only have to pass 3 texture coordinates to the vertex shader, which then passes those to the fragment shader that neatly interpolates all the texture coordinates for each fragment.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"\\uC0BC\\uAC01\\uD615\\uC5D0 \\uB300\\uD55C \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC810 3\\uAC1C\\uB97C \\uC9C0\\uC815\\uD55C\\uB2E4. \\uC0BC\\uAC01\\uD615\\uC758 \\uC0BC\\uAC01\\uD615\\uC758 \\uC67C\\uCABD \\uC544\\uB798 \\uBCC0\\uC774 \\uD14D\\uC2A4\\uCC98\\uC758 \\uC67C\\uCABD \\uC544\\uB798 \\uBCC0\\uACFC \\uC77C\\uCE58\\uD558\\uB3C4\\uB85D \\uC0BC\\uAC01\\uD615\\uC758 \\uC67C\\uCABD \\uC544\\uB798 vertex\\uC5D0 (0, 0) \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4. \\uC624\\uB978\\uCABD \\uC544\\uB798 \\uBCC0\\uACFC (1, 0) \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC5D0\\uB3C4 \\uB3D9\\uC77C\\uD558\\uAC8C \\uC801\\uC6A9\\uB41C\\uB2E4. \\uC0BC\\uAC01\\uD615\\uC758 \\uC704\\uCABD \\uAF2D\\uC9D3\\uC810\\uC740 \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uC758 \\uC911\\uC559 \\uC704\\uC640 \\uB300\\uC751\\uD574\\uC57C \\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C (0.5, 1.0)\\uC744 \\uCDE8\\uD55C\\uB2E4. vertex shader\\uC5D0\\uB294 3\\uAC1C\\uC758 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB9CC \\uB118\\uAE30\\uBA74 \\uB418\\uACE0, \\uADF8 \\uB2E4\\uC74C\\uC5D0\\uB294 \\uAC01 fragment\\uC5D0 \\uB300\\uD574 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB97C \\uAE54\\uB054\\uD558\\uAC8C \\uBCF4\\uAC04\\uD558\\uB294 fragment shader\\uC5D0 \\uC804\\uB2EC\\uB41C\\uB2E4.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The resulting texture coordinates would then look like this:\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\uACB0\\uACFC\\uB85C \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB294 \\uC774\\uB807\\uAC8C \\uBCF4\\uC77C \\uAC83\\uC774\\uB2E4.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-cpp\",children:`float texCoords[] = {\\r\n    0.0f, 0.0f,  // lower-left corner\\r\n    1.0f, 0.0f,  // lower-right corner\\r\n    0.5f, 1.0f   // top-center corner\\r\n};\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Texture sampling has a loose interpretation and can be done in many different ways. It is thus our job to tell OpenGL how it should\\xA0\",(0,t.jsx)(e.em,{children:\"sample\"}),`\\r\n\\xA0its textures.`]}),`\n`,(0,t.jsx)(e.p,{children:\"\\uD14D\\uC2A4\\uCC98 \\uC0D8\\uD50C\\uB9C1\\uC740 \\uB290\\uC2A8\\uD558\\uAC8C \\uBCF4\\uAC04\\uB418\\uBA70, \\uB2E4\\uC591\\uD55C \\uBC29\\uBC95\\uC73C\\uB85C \\uC218\\uD589\\uB420 \\uC218 \\uC788\\uB2E4. \\uB530\\uB77C\\uC11C OpenGL\\uC5D0 \\uC5B4\\uB5BB\\uAC8C \\uD14D\\uC2A4\\uCC98\\uB97C \\uC0D8\\uD50C\\uB9C1\\uD560 \\uAC83\\uC778\\uAC00\\uB97C \\uB9D0\\uD558\\uB294 \\uAC83\\uC740 \\uC6B0\\uB9AC\\uC758 \\uC77C\\uC774\\uB2E4.\"}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.strong,{children:\"Texture Wrapping\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Texture coordinates usually range from\\xA0\",(0,t.jsx)(e.code,{children:\"(0,0)\"}),\"\\xA0to\\xA0\",(0,t.jsx)(e.code,{children:\"(1,1)\"}),\"\\xA0but what happens if we specify coordinates outside this range? The default behavior of OpenGL is to repeat the texture images (we basically ignore the integer part of the floating point texture coordinate), but there are more options OpenGL offers:\"]}),`\n`,(0,t.jsx)(e.p,{children:\"\\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB294 \\uBCF4\\uD1B5 (0, 0)\\uBD80\\uD130 (1, 1)\\uAE4C\\uC9C0\\uC774\\uC9C0\\uB9CC, \\uC774 \\uBC94\\uC704\\uB97C \\uBC97\\uC5B4\\uB09C \\uC88C\\uD45C\\uB97C \\uC9C0\\uC815\\uD558\\uBA74 \\uC5B4\\uB5BB\\uAC8C \\uB420\\uAE4C? OpenGL\\uC758 \\uAE30\\uBCF8 \\uD589\\uB3D9\\uC740 \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uB97C \\uBC18\\uBCF5\\uD558\\uB294 \\uAC83\\uC774\\uC9C0\\uB9CC(\\uC6B0\\uB9AC\\uB294 \\uBD80\\uB3D9 \\uC18C\\uC218\\uC810 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC758 \\uC815\\uC218 \\uBD80\\uBD84\\uC740 \\uBB34\\uC2DC\\uD55C\\uB2E4), OpenGL\\uC5D0\\uC11C \\uB354 \\uB2E4\\uC591\\uD55C \\uC635\\uC158\\uC744 \\uC81C\\uACF5\\uD55C\\uB2E4.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"GL_REPEAT\"}),`: The default behavior for textures. Repeats the texture image.\\r\n\\uD14D\\uC2A4\\uCC98\\uC5D0 \\uC801\\uC6A9\\uB418\\uB294 \\uAE30\\uBCF8 \\uD589\\uB3D9\\uC774\\uB2E4. \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uB97C \\uBC18\\uBCF5\\uD55C\\uB2E4.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"GL_MIRRORED_REPEAT\"}),\": Same as\\xA0\",(0,t.jsx)(e.code,{children:\"GL_REPEAT\"}),`\\xA0but mirrors the image with each repeat.\\r\n`,(0,t.jsx)(e.code,{children:\"GL_REPEAT\"}),\"\\xA0\\uACFC \\uAC19\\uC9C0\\uB9CC \\uB9E4 \\uBC18\\uBCF5\\uB9C8\\uB2E4 \\uC774\\uBBF8\\uC9C0\\uB97C \\uB4A4\\uC9D1\\uB294\\uB2E4.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"GL_CLAMP_TO_EDGE\"}),\": Clamps the coordinates between\\xA0\",(0,t.jsx)(e.code,{children:\"0\"}),\"\\xA0and\\xA0\",(0,t.jsx)(e.code,{children:\"1\"}),`. The result is that higher coordinates become clamped to the edge, resulting in a stretched edge pattern.\\r\n0\\uC640 1 \\uC0AC\\uC774\\uC758 \\uC88C\\uD45C\\uB97C \\uACE0\\uC815\\uD55C\\uB2E4. \\uADF8 \\uACB0\\uACFC \\uD070 \\uC88C\\uD45C\\uAC00 \\uAC00\\uC7A5\\uC790\\uB9AC\\uC5D0 \\uACE0\\uC815\\uB418\\uACE0 \\uAC00\\uC7A5\\uC790\\uB9AC\\uC758 \\uD328\\uD134\\uC774 \\uB298\\uC5B4\\uB09C\\uB2E4.`]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"GL_CLAMP_TO_BORDER\"}),`: Coordinates outside the range are now given a user-specified border color.\\r\n\\uBC94\\uC704 \\uBC16\\uC758 \\uC88C\\uD45C\\uB4E4\\uC740 \\uC720\\uC800\\uAC00 \\uC9C0\\uC815\\uD55C \\uD14C\\uB450\\uB9AC \\uC0C9\\uC774 \\uBD80\\uC5EC\\uB41C\\uB2E4.`]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Each of the options have a different visual output when using texture coordinates outside the default range. Let's see what these look like on a sample texture image (original image by H\\xF3lger Rezende):\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\uAC01 \\uC635\\uC158\\uB4E4\\uC740 \\uAE30\\uBCF8 \\uBC94\\uC704 \\uBC14\\uAE65\\uC758 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB4E4\\uC744 \\uC0AC\\uC6A9\\uD560 \\uB54C \\uB2E4\\uB978 \\uC2DC\\uAC01\\uC801 \\uACB0\\uACFC\\uB97C \\uAC00\\uC9C4\\uB2E4. \\uC0D8\\uD50C \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uC5D0\\uC11C \\uC774\\uB4E4\\uC774 \\uC5B4\\uB5BB\\uAC8C \\uBCF4\\uC774\\uB294\\uC9C0 \\uC54C\\uC544\\uBCF4\\uC790(\\uC6D0\\uBCF8 \\uC774\\uBBF8\\uC9C0 H\\xF3lger Rezende).\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/post/LearnOpenGLTextures/Untitled2.png\",alt:\"Untitled\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Each of the aforementioned options can be set per coordinate axis (\",(0,t.jsx)(e.code,{children:\"s\"}),\", \",(0,t.jsx)(e.code,{children:\"t\"}),\" \\xA0(and\\xA0\",(0,t.jsx)(e.code,{children:\"r\"}),\"\\xA0if you're using 3D textures) equivalent to\\xA0x, y, z) with the\\xA0\",(0,t.jsx)(e.code,{children:\"glTexParameter*\"}),\"\\xA0function:\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\uAC01\\uAC01 \\uC55E\\uC11C \\uC5B8\\uAE09\\uD55C \\uC635\\uC158\\uB4E4\\uC740 \",(0,t.jsx)(e.code,{children:\"glTexParameter*\"}),\" \\uD568\\uC218\\uB97C \\uC774\\uC6A9\\uD574\\uC11C \\uC88C\\uD45C\\uCD95 (s, t (\\uADF8\\uB9AC\\uACE0 3D \\uD14D\\uC2A4\\uCC98\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4\\uBA74 r)) \\uBCC4\\uB85C \\uC124\\uC815\\uB420 \\uC218 \\uC788\\uB2E4.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-cpp\",children:`glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_MIRRORED_REPEAT);\\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_MIRRORED_REPEAT);\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The first argument specifies the texture target; we're working with 2D textures so the texture target is\\xA0\",(0,t.jsx)(e.code,{children:\"GL_TEXTURE_2D\"}),\". The second argument requires us to tell what option we want to set and for which texture axis; we want to configure it for both the\\xA0\",(0,t.jsx)(e.code,{children:\"S\"}),\"\\xA0and\\xA0\",(0,t.jsx)(e.code,{children:\"T\"}),\"\\xA0axis. The last argument requires us to pass in the texture wrapping mode we'd like and in this case OpenGL will set its texture wrapping option on the currently active texture with\\xA0GL_MIRRORED_REPEAT.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\uCCAB \\uBC88\\uC9F8 \\uC778\\uC790\\uB294 \\uBAA9\\uD45C \\uD14D\\uC2A4\\uCC98\\uB97C \\uC9C0\\uC815\\uD55C\\uB2E4. \\uC6B0\\uB9AC\\uB294 2D \\uD14D\\uC2A4\\uCC98\\uB97C \\uC774\\uC6A9\\uD558\\uACE0 \\uC788\\uAC1C \\uB54C\\uBB38\\uC5D0 \\uD14D\\uC2A4\\uCC98 \\uBAA9\\uD45C\\uB294 \",(0,t.jsx)(e.code,{children:\"GL_TEXTURE_2D\"}),\"\\uC774\\uB2E4. \\uB450 \\uBC88\\uC9F8 \\uC778\\uC790\\uB294 \\uC5B4\\uB5A4 \\uD14D\\uC2A4\\uCC98 \\uCD95\\uC5D0 \\uB300\\uD574\\uC11C \\uC635\\uC158\\uC744 \\uC801\\uC6A9\\uC2DC\\uD0AC\\uC9C0\\uB97C \\uD544\\uC694\\uB85C \\uD55C\\uB2E4. \\uC6B0\\uB9AC\\uB294 \",(0,t.jsx)(e.code,{children:\"S\"}),\"\\uC640 \",(0,t.jsx)(e.code,{children:\"T\"}),\"\\uCD95 \\uBAA8\\uB450\\uC5D0 \\uC801\\uC6A9\\uC2DC\\uD0A4\\uAE30\\uB97C \\uC6D0\\uD55C\\uB2E4. \\uB9C8\\uC9C0\\uB9C9 \\uC778\\uC790\\uB294 \\uC6D0\\uD558\\uB294 \\uD14D\\uC2A4\\uCC98 wrapping \\uBAA8\\uB4DC\\uB97C \\uC804\\uB2EC\\uD558\\uBA70 \\uC774 \\uACBD\\uC6B0\\uC5D0\\uB294 OpenGL\\uC774 texture wrapping \\uC635\\uC158\\uC73C\\uB85C \\uD604\\uC7AC \\uD65C\\uC131\\uD654\\uB41C \\uD14D\\uC2A4\\uCC98\\uC5D0 \",(0,t.jsx)(e.code,{children:\"GL_MIRRORED_REPEAT\"}),\"\\uB85C \\uC801\\uC6A9\\uD560 \\uAC83\\uC774\\uB2E4.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"If we choose the\\xA0GL_CLAMP_TO_BORDER\\xA0option we should also specify a border color. This is done using the\\xA0\",(0,t.jsx)(e.code,{children:\"fv\"}),\"\\xA0equivalent of the\\xA0glTexParameter\\xA0function with\\xA0GL_TEXTURE_BORDER_COLOR\\xA0as its option where we pass in a float array of the border's color value:\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\uB9CC\\uC57D \\uC6B0\\uB9AC\\uAC00 \",(0,t.jsx)(e.code,{children:\"GL_CLAMP_TO_BORDER\"}),\" \\uC635\\uC158\\uC744 \\uACE0\\uB978\\uB2E4\\uBA74 \\uD14C\\uB450\\uB9AC \\uC0C9\\uC0C1\\uB3C4 \\uC9C0\\uC815\\uD574\\uC57C \\uD55C\\uB2E4. \\uC774\\uB294 fv\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-cpp\",children:`float borderColor[] = { 1.0f, 1.0f, 0.0f, 1.0f };\\r\nglTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);\n`})}),`\n`,(0,t.jsx)(e.h2,{children:(0,t.jsx)(e.strong,{children:\"Texture Filtering\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Texture coordinates do not depend on resolution but can be any floating point value, thus OpenGL has to figure out which texture pixel (also known as a\\xA0texel\\xA0) to map the texture coordinate to. This becomes especially important if you have a very large object and a low resolution texture. You probably guessed by now that OpenGL has options for this\\xA0texture filtering\\xA0as well. There are several options available but for now we'll discuss the most important options:\\xA0\",(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"\\xA0and\\xA0\",(0,t.jsx)(e.code,{children:\"GL_LINEAR\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB294 \\uD574\\uC0C1\\uB3C4\\uC5D0 \\uC758\\uC874\\uD558\\uC9C0 \\uC54A\\uC9C0\\uB9CC \\uBD80\\uB3D9\\uC18C\\uC218\\uC810 \\uAC12\\uC774 \\uB420 \\uC218 \\uC788\\uC73C\\uBBC0\\uB85C OpenGL\\uC740 \\uC5B4\\uB5A4 \\uD14D\\uC2A4\\uCC98 \\uD53D\\uC140(texel\\uC774\\uB77C\\uACE0\\uB3C4 \\uD568)\\uC774 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC5D0 \\uB9E4\\uD551\\uB420 \\uC9C0 \\uD30C\\uC545\\uD574\\uC57C \\uD55C\\uB2E4. \\uC774\\uAC83\\uC740 \\uB9E4\\uC6B0 \\uD070 \\uBB3C\\uCCB4\\uC640 \\uB0AE\\uC740 \\uD574\\uC0C1\\uB3C4\\uC758 \\uD14D\\uC2A4\\uCC98\\uB97C \\uAC00\\uC9C4 \\uACBD\\uC6B0\\uC5D0 \\uB9E4\\uC6B0 \\uC911\\uC694\\uD574\\uC9C4\\uB2E4. \\uC9C0\\uAE08\\uCBE4 OpenGL\\uC774 \\uD14D\\uC2A4\\uCC98 \\uD544\\uD130\\uB9C1\\uC5D0 \\uB300\\uD574\\uC11C \\uC635\\uC158\\uB4E4\\uC744 \\uAC00\\uC9C0\\uACE0 \\uC788\\uB2E4\\uACE0 \\uC9D0\\uC791\\uD588\\uC744 \\uAC83\\uC774\\uB2E4. \\uBA87 \\uAC00\\uC9C0 \\uC635\\uC158\\uC744 \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uC9C0\\uB9CC, \\uD604\\uC7AC\\uB85C\\uC11C\\uB294 \\uAC00\\uC7A5 \\uC911\\uC694\\uD55C \\uC635\\uC158\\uC778 \",(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"\\uC640\\xA0\",(0,t.jsx)(e.code,{children:\"GL_LINEAR\"}),\"\\uC5D0 \\uB300\\uD574 \\uC54C\\uC544\\uBCF4\\uC790.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"\\xA0(also known as\\xA0nearest neighbor\\xA0or\\xA0point\\xA0filtering) is the default texture filtering method of OpenGL. When set to\\xA0\",(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\", OpenGL selects the texel that center is closest to the texture coordinate. Below you can see 4 pixels where the cross represents the exact texture coordinate. The upper-left texel has its center closest to the texture coordinate and is therefore chosen as the sampled color:\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"(nearest neighbor \\uB610\\uB294 point filtering\\uC774\\uB77C\\uACE0\\uB3C4 \\uC54C\\uB824\\uC9D0)\\uB294 OpenGL\\uC5D0\\uC11C \\uAE30\\uBCF8\\uC801\\uC778 \\uD14D\\uC2A4\\uCCD0 \\uD544\\uD130\\uB9C1 \\uBC29\\uBC95\\uC774\\uB2E4. \",(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"\\uB85C \\uC124\\uC815\\uB418\\uBA74, OpenGL\\uC740 \\uC911\\uC2EC\\uC774 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC5D0 \\uAC00\\uC7A5 \\uAC00\\uAE4C\\uC6B4 texel\\uC744 \\uC120\\uD0DD\\uD55C\\uB2E4. \\uC544\\uB798 \\uADF8\\uB9BC\\uC5D0\\uC11C \\uC2ED\\uC790\\uAC00\\uAC00 \\uC815\\uD655\\uD55C \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uB97C \\uB098\\uD0C0\\uB0B4\\uB294 4\\uD53D\\uC140\\uC744 \\uBCFC \\uC218 \\uC788\\uB2E4. \\uC67C\\uCABD \\uC704 texel\\uC758 \\uC911\\uC2EC\\uC740 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC5D0 \\uAC00\\uC7A5 \\uAC00\\uAE5D\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC0D8\\uD50C\\uB9C1\\uB41C \\uC0C9\\uC0C1\\uC73C\\uB85C \\uC120\\uD0DD\\uB41C\\uB2E4.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/post/LearnOpenGLTextures/Untitled3.png\",alt:\"Untitled\"})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"GL_LINEAR\"}),`\\r\n\\xA0(also known as\\xA0(bi)linear filtering) takes an interpolated value from the texture coordinate's neighboring texels, approximating a color between the texels. The smaller the distance from the texture coordinate to a texel's center, the more that texel's color contributes to the sampled color. Below we can see that a mixed color of the neighboring pixels is returned:`]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"GL_LINEAR\"}),\"((bi)linear filtering\\uC73C\\uB85C\\uB3C4 \\uC54C\\uB824\\uC9D0)\\uC740 \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC758 \\uC778\\uC811 texel\\uB85C\\uBD80\\uD130 \\uBCF4\\uAC04\\uB41C \\uAC12\\uC744 \\uAC00\\uC838\\uC640\\uC11C \\uD14D\\uC2A4\\uCC98 \\uC0AC\\uC774\\uC758 \\uC0C9\\uC744 \\uADFC\\uC0AC\\uD55C\\uB2E4. \\uD14D\\uC2A4\\uCC98 \\uC88C\\uD45C\\uC5D0\\uC11C texel\\uC758 \\uC911\\uC2EC\\uAE4C\\uC9C0 \\uAC70\\uB9AC\\uAC00 \\uB354 \\uAC00\\uAE4C\\uC6B8\\uC218\\uB85D, \\uC0D8\\uD50C\\uB9C1\\uB41C \\uC0C9\\uC0C1\\uC5D0 texel\\uC758 \\uC0C9\\uC0C1\\uC774 \\uB354 \\uB9CE\\uC774 \\uAE30\\uC5EC\\uD55C\\uB2E4. \\uC544\\uB798 \\uADF8\\uB9BC\\uC5D0\\uC11C \\uC778\\uC811\\uD55C \\uD53D\\uC140\\uB4E4\\uC758 \\uD63C\\uD569\\uB41C \\uC0C9\\uC0C1\\uC774 \\uBC18\\uD658\\uB418\\uB294 \\uAC83\\uC744 \\uBCFC \\uC218 \\uC788\\uB2E4.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/post/LearnOpenGLTextures/Untitled4.png\",alt:\"Untitled\"})}),`\n`,(0,t.jsx)(e.p,{children:\"But what is the visual effect of such a texture filtering method? Let's see how these methods work when using a texture with a low resolution on a large object (texture is therefore scaled upwards and individual texels are noticeable):\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\uADF8\\uB7EC\\uB098 \\uADF8\\uB7EC\\uD55C \\uD14D\\uC2A4\\uCC98 \\uD544\\uD130\\uB9C1 \\uBC29\\uBC95\\uC758 \\uC2DC\\uAC01\\uC801 \\uD6A8\\uACFC\\uB294 \\uBB34\\uC5C7\\uC778\\uAC00? \\uD070 \\uBB3C\\uCCB4\\uC5D0\\uC11C \\uB0AE\\uC740 \\uD574\\uC0C1\\uB3C4\\uC758 \\uD14D\\uC2A4\\uCC98\\uB97C \\uC0AC\\uC6A9\\uD560 \\uB54C \\uC774\\uB7EC\\uD55C \\uBC29\\uBC95\\uC774 \\uC5B4\\uB5BB\\uAC8C \\uC791\\uB3D9\\uD558\\uB294\\uC9C0 \\uC54C\\uC544\\uBCF4\\uC790 (\\uADF8\\uB7EC\\uBBC0\\uB85C \\uD14D\\uC2A4\\uCC98\\uB294 \\uD06C\\uAC8C \\uC870\\uC815\\uB418\\uACE0 \\uAC01 texel\\uB4E4\\uC774 \\uAD00\\uCC30\\uB41C\\uB2E4).\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/post/LearnOpenGLTextures/Untitled5.png\",alt:\"Untitled\"})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"\\xA0results in blocked patterns where we can clearly see the pixels that form the texture while\\xA0\",(0,t.jsx)(e.code,{children:\"GL_LINEAR\"}),\"\\xA0produces a smoother pattern where the individual pixels are less visible.\\xA0\",(0,t.jsx)(e.code,{children:\"GL_LINEAR\"}),\"\\xA0produces a more realistic output, but some developers prefer a more 8-bit look and as a result pick the\\xA0\",(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"\\xA0option.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"\\uB294 \\uD14D\\uC2A4\\uCC98\\uB97C \\uD615\\uC131\\uD558\\uB294 \\uD53D\\uC140\\uB4E4\\uC744 \\uBA85\\uD655\\uD558\\uAC8C \\uBCFC \\uC218 \\uC788\\uB294 \\uB369\\uC5B4\\uB9AC\\uC9C4 \\uD328\\uD134\\uC744 \\uB0B3\\uC9C0\\uB9CC \",(0,t.jsx)(e.code,{children:\"GL_LINEAR\"}),\"\\uB294 \\uAC1C\\uBCC4\\uC801\\uC778 \\uD53D\\uC140\\uB4E4\\uC740 \\uB35C \\uBCF4\\uC774\\uB294 \\uBD80\\uB4DC\\uB7EC\\uC6B4 \\uD328\\uD134\\uC744 \\uB9CC\\uB4E0\\uB2E4. \",(0,t.jsx)(e.code,{children:\"GL_LINEAR\"}),\"\\uB294 \\uB354 \\uC0AC\\uC2E4\\uC801\\uC778 \\uACB0\\uACFC\\uBB3C\\uC744 \\uB9CC\\uB4E4\\uC9C0\\uB9CC, \\uBA87\\uBA87 \\uAC1C\\uBC1C\\uC790\\uB4E4\\uC740 8-bit \\uBAA8\\uC591\\uC744 \\uC120\\uD638\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \",(0,t.jsx)(e.code,{children:\"GL_NEAREST\"}),\"\\xA0\\uC635\\uC158\\uC744 \\uACE0\\uB978\\uB2E4.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Texture filtering can be set for\\xA0magnifying\\xA0and\\xA0minifying\\xA0operations (when scaling up or downwards) so you could for example use nearest neighbor filtering when textures are scaled downwards and linear filtering for upscaled textures. We thus have to specify the filtering method for both options via\\xA0\",(0,t.jsx)(e.code,{children:\"glTexParameter*\"}),\". The code should look similar to setting the wrapping method:\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\uD14D\\uC2A4\\uCC98 \\uD544\\uD130\\uB9C1\\uC740 \\uD655\\uB300\\uD558\\uACE0 \\uCD95\\uC18C\\uD558\\uB294 \\uC791\\uC5C5(\\uD655\\uB300 \\uB610\\uB294 \\uCD95\\uC18C \\uC2DC)\\uC73C\\uB85C \\uC124\\uC815\\uB420 \\uC218 \\uC788\\uC73C\\uBBC0\\uB85C \\uC608\\uB97C \\uB4E4\\uC5B4 \\uD14D\\uC2A4\\uCC98\\uAC00 \\uC791\\uAC8C \\uBCC0\\uD658\\uB420 \\uB54C nearest neighbor filtering\\uC744 \\uC0AC\\uC6A9\\uD558\\uAC70\\uB098 \\uD14D\\uC2A4\\uCC98\\uAC00 \\uD06C\\uAC8C \\uBCC0\\uD658\\uB418\\uC5C8\\uC744 \\uB54C linear filtering\\uC744 \\uC0AC\\uC6A9\\uD560 \\uC218 \\uC788\\uB2E4. \\uB530\\uB77C\\uC11C \\uC6B0\\uB9AC\\uB294 \",(0,t.jsx)(e.code,{children:\"glTexParameter*\"}),\"\\uB97C \\uD1B5\\uD574 \\uB450 \\uC635\\uC158\\uC5D0 \\uB300\\uD55C \\uD544\\uD130\\uB9C1 \\uBC29\\uBC95\\uC744 \\uC9C0\\uC815\\uD574\\uC57C \\uD55C\\uB2E4. \\uCF54\\uB4DC\\uB294 \",(0,t.jsx)(e.em,{children:\"wrapping\"}),\" \\uBC29\\uBC95 \\uC124\\uC815\\uACFC \\uBE44\\uC2B7\\uD574\\uC57C \\uD55C\\uB2E4.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-cpp\",children:`glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);\\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Mipmaps\"}),`\n`,(0,t.jsx)(e.p,{children:\"Imagine we had a large room with thousands of objects, each with an attached texture. There will be objects far away that have the same high resolution texture attached as the objects close to the viewer. Since the objects are far away and probably only produce a few fragments, OpenGL has difficulties retrieving the right color value for its fragment from the high resolution texture, since it has to pick a texture color for a fragment that spans a large part of the texture. This will produce visible artifacts on small objects, not to mention the waste of memory bandwidth using high resolution textures on small objects.\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\uAC01\\uAC01 \\uD14D\\uC2A4\\uCC98\\uAC00 \\uBD99\\uC5B4 \\uC788\\uB294 \\uC218\\uCC9C \\uAC1C\\uC758 \\uBB3C\\uCCB4\\uAC00 \\uC788\\uB294 \\uCEE4\\uB2E4\\uB780 \\uBC29\\uC744 \\uC0C1\\uC0C1\\uD574\\uBCF4\\uC790. \\uAD00\\uCC30\\uC790\\uC5D0 \\uAC00\\uAE4C\\uC6B4 \\uACE0\\uD574\\uC0C1\\uB3C4\\uC758 \\uD14D\\uC2A4\\uCC98\\uAC00 \\uBD99\\uC5B4 \\uC788\\uB294 \\uBB3C\\uCCB4\\uB4E4\\uACFC \\uB3D9\\uC77C\\uD55C \\uBB3C\\uCCB4\\uB4E4\\uC774 \\uBA40\\uB9AC\\uC5D0\\uB3C4 \\uC788\\uC744 \\uAC83\\uC774\\uB2E4. \\uBB3C\\uCCB4\\uB4E4\\uC740 \\uBA40\\uB9AC \\uC788\\uACE0 \\uC544\\uB9C8 \\uBA87\\uBA87 fragment\\uB9CC\\uC744 \\uC0DD\\uC131\\uD560 \\uAC83\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0, OpenGL\\uC740 \\uD14D\\uC2A4\\uCC98\\uC758 \\uD070 \\uBD80\\uBD84\\uC744 \\uD655\\uC7A5\\uD558\\uB294 fragment\\uB97C \\uC704\\uD55C \\uD14D\\uC2A4\\uCC98 \\uC0C9\\uC0C1\\uC744 \\uACE8\\uB77C\\uC57C \\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0, \\uACE0\\uD574\\uC0C1\\uB3C4 \\uD14D\\uC2A4\\uCC98\\uC5D0\\uC11C fragment\\uB97C \\uC704\\uD55C \\uB9DE\\uB294 \\uC0C9\\uC0C1\\uC744 \\uCC3E\\uB294 \\uB370 \\uC5B4\\uB824\\uC6C0\\uC774 \\uC788\\uB2E4. \\uC774\\uAC83\\uC740 \\uC791\\uC740 \\uBB3C\\uCCB4\\uB4E4\\uC5D0 \\uACE0\\uD574\\uC0C1\\uB3C4\\uC758 \\uD14D\\uC2A4\\uCC98\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uBA54\\uBAA8\\uB9AC \\uB300\\uC5ED\\uD3ED\\uC758 \\uB0AD\\uBE44\\uB294 \\uB9D0\\uD560 \\uAC83\\uB3C4 \\uC5C6\\uACE0 \\uC791\\uC740 \\uBB3C\\uCCB4\\uC5D0\\uC11C \\uB208\\uC5D0 \\uBCF4\\uC774\\uB294 \\uC778\\uACF5\\uBB3C\\uC744 \\uC0DD\\uC131\\uD560 \\uAC83\\uC774\\uB2E4.\"}),`\n`,(0,t.jsx)(e.p,{children:\"To solve this issue OpenGL uses a concept called\\xA0mipmaps\\xA0that is basically a collection of texture images where each subsequent texture is twice as small compared to the previous one. The idea behind mipmaps should be easy to understand: after a certain distance threshold from the viewer, OpenGL will use a different mipmap texture that best suits the distance to the object. Because the object is far away, the smaller resolution will not be noticeable to the user. OpenGL is then able to sample the correct texels, and there's less cache memory involved when sampling that part of the mipmaps. Let's take a closer look at what a mipmapped texture looks like:\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\uC774 \\uBB38\\uC81C\\uB97C \\uD574\\uACB0\\uD558\\uAE30 \\uC704\\uD574\\uC11C OpenGL\\uC740 \\uAE30\\uBCF8\\uC801\\uC73C\\uB85C \\uC5F0\\uC18D\\uD558\\uB294 \\uD14D\\uC2A4\\uCC98\\uAC00 \\uC774\\uC804 \\uD14D\\uC2A4\\uCC98\\uBCF4\\uB2E4 1/2 \\uD06C\\uAE30\\uC778 \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uB4E4\\uC758 \\uBAA8\\uC74C\\uC744 \\uC774\\uB974\\uB294 mipmap\\uC774\\uB77C\\uB294 \\uAC1C\\uB150\\uC744 \\uC0AC\\uC6A9\\uD55C\\uB2E4. mipmap\\uC5D0 \\uB4E4\\uC5B4 \\uC788\\uB294 \\uC544\\uC774\\uB514\\uC5B4\\uB294 \\uC774\\uD574\\uD558\\uAE30 \\uC26C\\uC6CC\\uC57C \\uD55C\\uB2E4: \\uAD00\\uCC30\\uC790\\uB85C\\uBD80\\uD130 \\uC77C\\uC815 \\uAC70\\uB9AC \\uC784\\uACC4\\uC810\\uC774 \\uC9C0\\uB098\\uBA74, OpenGL\\uC740 \\uBB3C\\uCCB4\\uAE4C\\uC9C0\\uC758 \\uAC70\\uB9AC\\uC5D0 \\uAC00\\uC7A5 \\uB9DE\\uB294 \\uB2E4\\uB978 mipmap \\uD14D\\uC2A4\\uCC98\\uB97C \\uC0AC\\uC6A9\\uD560 \\uAC83\\uC774\\uB2E4. \\uBB3C\\uCCB4\\uAC00 \\uBA40\\uB9AC \\uC788\\uC73C\\uBBC0\\uB85C, \\uB354 \\uC791\\uC740 \\uD574\\uC0C1\\uB3C4\\uB294 \\uC720\\uC800\\uC5D0\\uAC8C \\uBCF4\\uC774\\uC9C0 \\uC54A\\uC744 \\uAC83\\uC774\\uB2E4. \\uADF8\\uB9AC\\uD558\\uC5EC OpenGL\\uC740 \\uB9DE\\uB294 texel\\uC744 \\uCC3E\\uC744 \\uC218 \\uC788\\uACE0, mipmap\\uC758 \\uBD80\\uBD84\\uC744 \\uC0D8\\uD50C\\uB9C1\\uD560 \\uB54C \\uAD00\\uC5EC\\uD558\\uB294 \\uCE90\\uC2DC \\uBA54\\uBAA8\\uB9AC\\uB294 \\uB354 \\uC801\\uC744 \\uAC83\\uC774\\uB2E4. mipmap \\uD14D\\uC2A4\\uCC98\\uAC00 \\uC5B4\\uB5BB\\uAC8C \\uC0DD\\uACBC\\uB294\\uC9C0 \\uB354 \\uC790\\uC138\\uD788 \\uC54C\\uC544\\uBCF4\\uC790.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/post/LearnOpenGLTextures/Untitled6.png\",alt:\"Untitled\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Creating a collection of mipmapped textures for each texture image is cumbersome to do manually, but luckily OpenGL is able to do all the work for us with a single call to\\xA0\",(0,t.jsx)(e.code,{children:\"glGenerateMipmap\"}),\"\\xA0after we've created a texture.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\uAC01 \\uD14D\\uC2A4\\uCC98 \\uC774\\uBBF8\\uC9C0\\uC5D0 \\uB300\\uD574\\uC11C mipmap \\uD14D\\uC2A4\\uCC98\\uC758 \\uBAA8\\uC74C\\uC744 \\uC218\\uB3D9\\uC73C\\uB85C \\uC0DD\\uC131\\uD558\\uB294 \\uAC83\\uC740 \\uC131\\uAC00\\uC2DC\\uC9C0\\uB9CC, \\uC6B4\\uC88B\\uAC8C\\uB3C4 \\uC6B0\\uB9AC\\uAC00 \\uD14D\\uC2A4\\uCC98\\uB97C \\uC0DD\\uC131\\uD558\\uACE0 \\uB098\\uC11C \",(0,t.jsx)(e.code,{children:\"glGenerateMipmap\"}),\"\\uB97C \\uD638\\uCD9C\\uD558\\uB294 \\uAC83\\uC73C\\uB85C OpenGL\\uC774 \\uBAA8\\uB4E0 \\uC791\\uC5C5\\uC744 \\uD560 \\uC218 \\uC788\\uB2E4.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"When switching between mipmaps levels during rendering OpenGL may show some artifacts like sharp edges visible between the two mipmap layers. Just like normal texture filtering, it is also possible to filter between mipmap levels using\\xA0\",(0,t.jsx)(e.code,{children:\"NEAREST\"}),\"\\xA0and\\xA0\",(0,t.jsx)(e.code,{children:\"LINEAR\"}),\"\\xA0filtering for switching between mipmap levels. To specify the filtering method between mipmap levels we can replace the original filtering methods with one of the following four options:\"]}),`\n`,(0,t.jsx)(e.p,{children:\"\\uB80C\\uB354\\uB9C1 \\uC911\\uC5D0 mipmap \\uB808\\uBCA8 \\uC0AC\\uC774\\uB97C \\uC774\\uB3D9\\uD560 \\uB54C OpenGL\\uC740 \\uB450 mipmap \\uB808\\uC774\\uC5B4 \\uC0AC\\uC774\\uC5D0 \\uB0A0\\uCE74\\uB85C\\uC6B4 \\uBAA8\\uC11C\\uB9AC\\uAC19\\uC740 \\uBB3C\\uCCB4\\uB97C \\uBCF4\\uC5EC\\uC904 \\uC9C0\\uB3C4 \\uBAA8\\uB978\\uB2E4. \\uC77C\\uBC18 \\uD14D\\uC2A4\\uCC98 \\uD544\\uD130\\uB9C1\\uCC98\\uB7FC, mipmap \\uB808\\uBCA8 \\uC0AC\\uC774\\uB97C \\uC774\\uB3D9\\uD558\\uAE30 \\uC704\\uD574 \\uADF8 \\uC0AC\\uC774\\uC5D0 NEAREST\\uC640 LINEAR \\uD544\\uD130\\uB9C1\\uC744 \\uC0AC\\uC6A9\\uD558\\uB294 \\uAC83\\uB3C4 \\uAC00\\uB2A5\\uD558\\uB2E4. mipmap \\uB808\\uBCA8 \\uC0AC\\uC774\\uC5D0 \\uD544\\uD130\\uB9C1 \\uBC29\\uBC95\\uC744 \\uC9C0\\uC815\\uD558\\uAE30 \\uC704\\uD574\\uC11C \\uC6B0\\uB9AC\\uB294 \\uAE30\\uBCF8 \\uBC29\\uBC95\\uC744 \\uB2E4\\uC74C 4\\uAC00\\uC9C0 \\uC635\\uC158 \\uC911 \\uD558\\uB098\\uB85C \\uB300\\uCCB4\\uD560 \\uC218 \\uC788\\uB2E4.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"GL_NEAREST_MIPMAP_NEAREST\"}),`: takes the nearest mipmap to match the pixel size and uses nearest neighbor interpolation for texture sampling.\\r\n`,(0,t.jsx)(e.code,{children:\"GL_NEAREST_MIPMAP_NEAREST\"}),\": \\uD53D\\uC140 \\uC0AC\\uC774\\uC988\\uC640 \\uC77C\\uCE58\\uD558\\uB3C4\\uB85D \\uAC00\\uC7A5 \\uAC00\\uAE4C\\uC6B4 mipmap\\uC744 \\uAC00\\uC838\\uC640 \\uD14D\\uC2A4\\uCC98 \\uC0D8\\uD50C\\uB9C1\\uC5D0 nearest neighbor \\uBCF4\\uAC04\\uC744 \\uC0AC\\uC6A9\\uD55C\\uB2E4.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"GL_LINEAR_MIPMAP_NEAREST\"}),`: takes the nearest mipmap level and samples that level using linear interpolation.\\r\n`,(0,t.jsx)(e.code,{children:\"GL_LINEAR_MIPMAP_NEAREST\"}),\": \\uAC00\\uC7A5 \\uAC00\\uAE4C\\uC6B4 mipmap \\uB808\\uBCA8\\uC744 \\uAC00\\uC838\\uC640 \\uC120\\uD615 \\uBCF4\\uAC04 \\uBC29\\uBC95\\uC744 \\uC0AC\\uC6A9\\uD574 \\uC0D8\\uD50C\\uB9C1\\uD55C\\uB2E4.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"GL_NEAREST_MIPMAP_LINEAR\"}),`: linearly interpolates between the two mipmaps that most closely match the size of a pixel and samples the interpolated level via nearest neighbor interpolation.\\r\n`,(0,t.jsx)(e.code,{children:\"GL_NEAREST_MIPMAP_LINEAR\"}),\": \\uD53D\\uC140 \\uC0AC\\uC774\\uC988\\uC640 \\uAC00\\uC7A5 \\uAC00\\uAE5D\\uAC8C \\uB9DE\\uB294 \\uB450 mipmap \\uC0AC\\uC774\\uB97C \\uC120\\uD615\\uC73C\\uB85C \\uBCF4\\uAC04\\uD558\\uACE0 \\uBCF4\\uAC04\\uB41C \\uB808\\uBCA8\\uC5D0\\uC11C nearest neighbor \\uBCF4\\uAC04\\uBC95\\uC73C\\uB85C \\uC0D8\\uD50C\\uB9C1\\uD55C\\uB2E4.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:\"GL_LINEAR_MIPMAP_LINEAR\"}),`: linearly interpolates between the two closest mipmaps and samples the interpolated level via linear interpolation.\\r\n`,(0,t.jsx)(e.code,{children:\"GL_LINEAR_MIPMAP_LINEAR\"}),\": \\uAC00\\uC7A5 \\uAC00\\uAE4C\\uC6B4 mipmap\\uC744 \\uC120\\uD615\\uC73C\\uB85C \\uBCF4\\uAC04\\uD558\\uACE0 \\uBCF4\\uAC04\\uB41C \\uB808\\uBCA8\\uC744 \\uC120\\uD615 \\uBCF4\\uAC04\\uBC95\\uC73C\\uB85C \\uC0D8\\uD50C\\uB9C1\\uD55C\\uB2E4.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Just like texture filtering we can set the filtering method to one of the 4 aforementioned methods using\\xA0\",(0,t.jsx)(e.code,{children:\"glTexParameteri\"}),\":\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\uD14D\\uC2A4\\uCC98 \\uD544\\uD130\\uB9C1\\uACFC \\uB9C8\\uCC2C\\uAC00\\uC9C0\\uB85C \\uC6B0\\uB9AC\\uB294 \",(0,t.jsx)(e.code,{children:\"glTexParameteri\"}),\"\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C \\uD544\\uD130\\uB9C1 \\uBC29\\uBC95\\uC744 \\uC704\\uC5D0\\uC11C \\uC5B8\\uAE09\\uB41C 4\\uAC00\\uC9C0 \\uBC29\\uBC95 \\uC911 \\uD558\\uB098\\uB85C \\uC124\\uC815\\uD560 \\uC218 \\uC788\\uB2E4.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-cpp\",children:`glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);\\r\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"A common mistake is to set one of the mipmap filtering options as the magnification filter. This doesn't have any effect since mipmaps are primarily used for when textures get downscaled: texture magnification doesn't use mipmaps and giving it a mipmap filtering option will generate an OpenGL\\xA0\",(0,t.jsx)(e.code,{children:\"GL_INVALID_ENUM\"}),\"\\xA0error code.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\uD754\\uD55C \\uC2E4\\uC218\\uB294 mipmap \\uD544\\uD130\\uB9C1 \\uC635\\uC158 \\uC911 \\uD558\\uB098\\uB97C \\uD655\\uB300 \\uD544\\uD130\\uB85C \\uC124\\uC815\\uD558\\uB294 \\uAC83\\uC774\\uB2E4. mipmap\\uC740 \\uC8FC\\uB85C \\uD14D\\uC2A4\\uCC98\\uAC00 \\uCD95\\uC18C\\uB420 \\uB54C \\uC8FC\\uB85C \\uC0AC\\uC6A9\\uB418\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC544\\uBB34\\uB7F0 \\uD6A8\\uACFC\\uAC00 \\uC5C6\\uB2E4. \\uD14D\\uC2A4\\uCC98 \\uD655\\uB300\\uB294 mipmap\\uC744 \\uC0AC\\uC6A9\\uD558\\uC9C0 \\uC54A\\uC73C\\uBA70 \\uD655\\uB300\\uB97C \\uC704\\uD574 mipmap \\uD544\\uD130\\uB9C1 \\uC635\\uC158\\uC744 \\uC8FC\\uB294 \\uAC83\\uC740 OpenGL \",(0,t.jsx)(e.code,{children:\"GL_INVALID_ENUM\"}),\"\\xA0\\uC5D0\\uB7EC \\uCF54\\uB4DC\\uB97C \\uB9CC\\uB4E4 \\uAC83\\uC774\\uB2E4.\"]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,Object.assign({},r,{children:(0,t.jsx)(c,r)})):c(r)}var T=_;function b(r,e,n){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+r+\"` to be defined: you likely forgot to import, pass, or provide it.\"+(n?\"\\nIt\\u2019s referenced in your code at `\"+n+\"` in `C:\\\\Users\\\\\\uAC15\\uB2E4\\uD61C\\\\Desktop\\\\code\\\\psst54-blog-ts\\\\files\\\\post\\\\_mdx_bundler_entry_point-d57d5866-f074-454e-ba9b-58f25ed8df0f.mdx`\":\"\"))}return w(G);})();\n;return Component;"
  },
  "_id": "post/LearnOpenGLTextures/index.mdx",
  "_raw": {
    "sourceFilePath": "post/LearnOpenGLTextures/index.mdx",
    "sourceFileName": "index.mdx",
    "sourceFileDir": "post/LearnOpenGLTextures",
    "contentType": "mdx",
    "flattenedPath": "post/LearnOpenGLTextures"
  },
  "type": "Post",
  "fileName": "LearnOpenGLTextures"
}